# -*- coding: utf-8 -*-
"""KM-05: Functions, OOP, Time Complexity Iqlil .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16wNXtjFEKEeTtIm7ehmeU_UY0ooiNn0h

# **Fungsi**
"""

# Deklarasi Fungsi
def cetak(x,y):
  print(x+y)

# Memanggil Fungsi
cetak("wokee"," gass")
cetak("wokee"," lanjut")

# Deklarasi Fungsi dengan pengembalian
def tambah(a, b):
  return a + b;

# Memanggil Fungsi
print(tambah(2, 3))
print(tambah(4, 3))

def nama_fungsi(arg1, arg2, ...):
  # isi fungsi

def fungsi_dengan_pengembalian(arg1, arg2, ...):
  # isi fungsi
  return 'sesuatu'

"""# **Method**"""

class NamaClass:
  def nama_method(arg1, arg2, ...):
    # isi method

# Deklarasi Object (Class)
class Kucing(object):
  def meong(self):
    print("meeooong")

# Memanggil method
cat = Kucing()
cat.meong()

"""# **Lambda Expression**"""

# Lambda expression
tambah = lambda a, b: (a + b)
print(tambah(2, 3))

"""# **Object Oriented Programming**

## **Encapsulation**
"""

nama = "cemong"
usia = 1
warna = "putih coklat muda"
jenis = "anggora"

def meongg():
  print("meeeoonnggg... ")

def info_kucing(nama, usia, warna, jenis):
  print(f"nama: {nama}, usia: {usia}, warna: {warna}, jenis: {jenis}")

info_kucing(nama, usia, warna, jenis)


class Kucing:
  def __init__(self, nama, usia, warna, jenis):
    self.nama = nama
    self.usia = usia
    self.warna = warna
    self.jenis = jenis

  def myfunc(self):
    print("Hello my name is " + self.nama)
  
  def meong(self):
    print("meeeoonnggg... ")

  def info(self):
    print(f"nama: {self.nama}, usia: {self.usia}, warna: {self.warna}, jenis: {self.jenis}")


kucing1 = Kucing("cemong", 1, "putih coklat muda", "anggora")
kucing2 = Kucing.meong(kucing1)
kucing1.info()

#contoh saya
merk = "logitech"
th_produksi = 2020
warna = "Hitam RGB"
jenis = "Mouse"


def info_aksesoris(merk, th_produksi, warna, jenis):
  print(f"nama: {merk}, Tahun Produksi: {th_produksi}, warna: {warna}, jenis: {jenis}")

info_aksesoris(merk, th_produksi, warna, jenis)


class acc_pc:
  def __init__(self, merk, th_produksi, warna, jenis):
    self.merk = merk
    self.th_produksi = th_produksi
    self.warna = warna
    self.jenis = jenis

  def myfunc(self):
    print(" aksesoris ini bermerk " + self.merk)
  
  def info(self):
    print(f"nama: {self.merk}, Tahun Produksi: {self.th_produksi}, warna: {self.warna}, jenis: {self.jenis}")


acc1 = acc_pc("logitech", 2020, "Hitam RGB", "Mouse")
acc1.info()

"""## **Abstraction**"""

# Memanggil method dari objek tanpa harus mengetahui cara kerja method
acc1.myfunc()

"""## **Inheritence**"""

class Binatang(object):
  def __init__(self, nama, usia, jenis, mamalia):
    self.nama = nama
    self.usia = usia
    self.jenis = jenis
    self.mamalia = mamalia

  def tidur(self, durasi):
    for x in range(durasi):
      print("ddrrr... ddrrr... ")

  def info(self):
    print(f"nama: {self.nama}, usia: {self.usia}, jenis: {self.jenis}, mamalia: {self.mamalia}")


animal1 = Binatang("cemong", 1, "omnivora", True)

animal1.info()

class Kucing(Binatang):
  def __init__(self,  nama, usia, jenis, mamalia, warna, jenis_kucing):
    super().__init__(nama, usia, jenis, mamalia)
    self.warna = warna
    self.jenis_kucing = jenis_kucing
  
  def meong(self):
    print("meeeonnggg")

  def info_kucing(self):
    print(f"warna: {self.warna}, jenis kucing: {self.jenis_kucing}")

cat1 = Kucing("cemong", 1, "omnivora", True, "putih coklat muda", "anggora")

cat1.info()
cat1.info_kucing()

#code saya
class Komputer(object):
  def __init__(self, merk, th_produksi, jenis, wireless):
    self.merk = merk
    self.th_produksi = th_produksi
    self.jenis = jenis
    self.wireless = wireless

  def lowbatt(self, durasi):
    for x in range(durasi):
      print("Tiiiit......Tiiiiit Baterai Habis ")

  def info(self):
    print(f"merk: {self.merk}, th_produksi: {self.th_produksi}, jenis: {self.jenis}, wireless: {self.wireless}")


comp1 = Komputer("Logitech", 2020, "Mouse", True)

comp1.info()

class acc_pc(Komputer):
  def __init__(self,  merk, th_produksi, jenis, wireless, warna, jenis_aksesoris):
    super().__init__(merk, th_produksi, jenis, wireless)
    self.warna = warna
    self.jenis_aksesoris = jenis_aksesoris
  
  def info_aksesoris(self):
    print(f"warna: {self.warna}, jenis aksesoris: {self.jenis_aksesoris}")

aksesoris1 = acc_pc("Logitech", 2020, "Mouse", True, "Hitam RGB", "Mouse")

aksesoris1.info()
aksesoris1.info_aksesoris()

"""## **Polymorphism**"""

class Ikan(Binatang):
  def __init__(self,  nama, usia, jenis, mamalia, warna, jenis_air, jenis_ikan):
    super().__init__(nama, usia, jenis, mamalia)
    self.warna = warna
    self.jenis_air = jenis_air
    self.jenis_ikan = jenis_ikan
  
  def berenang(self, durasi):
    print("wushh... wush... ")

  def info_ikan(self):
    print(f"warna: {self.warna}, jenis ikan: {self.jenis_ikan}, jenis air: {self.jenis_air}")

fish1 = Ikan("Jago", 2, "omnivora", False, "Merah Putih", "Tawar", "Cupang")

fish1.info()
fish1.info_ikan()
fish1.tidur(5)

#code sendiri
class ProcessingUnit(Komputer):
  def __init__(self,  merk, th_produksi, jenis, wireless, warna, jenis_pemrosesan):
    super().__init__(merk, th_produksi, jenis, wireless)
    self.warna = warna
    self.jenis_pemrosesan = jenis_pemrosesan
  
  def cooler(self, durasi):
    for x in range(durasi):
      print("wiing... wiiiing... ")

  def info_PU(self):
    print(f"warna: {self.warna}, jenis pemrosesan: {self.jenis_pemrosesan}")

PU1 = ProcessingUnit("Nvidia", 2021, "GPU", False, "Putih", "Dedicated Graphic Card")

PU1.info()
PU1.info_PU()
PU1.cooler(5)

"""## **Activity OOP**

Buatlah 3 OOP beserta turunannya dari objek sekitar, buat ulang seperti yang diatas (encapsulation, abstaction, inheritance, polymorphism)

# **Time Complexity**
## Activity 

Hitung time complexity dengan bigO Notation pada algoritma berikut:

* Tidak perlu di run
"""

# 1 
# O(1)

arr = [1, 2, 3, 4, 5]

print(arr[0])
print(arr[1])

# 2
# O(n)
print(arr[2])
for number in arr:
  print(number)
print(arr[1])
print(arr[2])

# 3
# O(n)
arr2 = [6, 7, 8, 9, 10]

for number in arr:
  print(number)
for number in arr2:
  print(number)
print(arr2[4])

# 4 
# O(n)
print(arr2[1])
for number in arr:
  print(number)
for number in arr:
  print(number)

# 5
# O(n^2)
for number in arr:
  for number2 in arr2:
    print(number+number2)
print(arr[1]+arr2[1])
print(arr2[2])

# 6 
# O(n^2)
for number in arr:
  for number2 in arr:
    print(number+number2)
print(arr)

# 7 
# O(n^3)
for number in arr:
  for number2 in arr2:
    for number3 in arr:
      print(number+number2+number3)
print(arr[1])
print(arr2[2])
print(arr2[3])

# 8
# O(n^2)
for number in arr:
  print(number)
print(arr2)
for number in arr:
  for number2 in arr2:
    print(number+number2)
print(arr)

# 9 
# O (n^2)
# algoritma bubble sort

# 10
# O (n)
# algoritma linear search

# 11
# O (log n)
# algoritma binary search
